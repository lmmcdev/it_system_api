/**
 * Azure Function: Update Vulnerability
 * HTTP PUT endpoint to update an existing vulnerability
 */

import { app, HttpRequest, HttpResponseInit, InvocationContext } from '@azure/functions';
import { vulnerabilityDefenderService } from '../services/VulnerabilityDefenderService';
import { handleError, successResponse, ValidationError } from '../utils/errorHandler';
import { logger } from '../utils/logger';
import { validateFunctionKey } from '../middleware/authentication';
import { checkRateLimit, createRateLimitResponse, RATE_LIMITS } from '../middleware/rateLimit';
import { validateId } from '../utils/validator';
import { UpdateVulnerabilityRequest } from '../models/VulnerabilityDefender';

async function updateVulnerability(
  request: HttpRequest,
  context: InvocationContext
): Promise<HttpResponseInit> {
  try {
    logger.setContext({
      functionName: context.functionName,
      invocationId: context.invocationId
    });

    logger.info('Processing update vulnerability request');

    // Authentication check
    const authResult = validateFunctionKey(request);
    if (!authResult.authenticated) {
      logger.warn('Authentication failed', { error: authResult.error });
      return {
        status: 401,
        jsonBody: {
          success: false,
          error: {
            code: 'AUTHENTICATION_FAILED',
            message: authResult.error || 'Authentication required'
          },
          timestamp: new Date().toISOString()
        },
        headers: {
          'Content-Type': 'application/json',
          'WWW-Authenticate': 'FunctionKey'
        }
      };
    }

    logger.info('Authentication successful', { userId: authResult.userId });

    // Rate limiting check
    const rateLimitResult = checkRateLimit(request, 'update', RATE_LIMITS.update);
    if (!rateLimitResult.allowed) {
      return createRateLimitResponse(rateLimitResult);
    }

    // Get and validate ID parameter
    const id = request.params.id;
    const idValidation = validateId(id);

    if (!idValidation.valid) {
      logger.warn('ID validation failed', { id, error: idValidation.error });
      throw new ValidationError(idValidation.error || 'Invalid ID format');
    }

    // Parse request body
    const body = await request.text();
    if (!body) {
      throw new ValidationError('Request body is required');
    }

    let data: UpdateVulnerabilityRequest;
    try {
      data = JSON.parse(body) as UpdateVulnerabilityRequest;
    } catch (parseError) {
      logger.warn('Failed to parse request body', { error: parseError });
      throw new ValidationError('Invalid JSON in request body');
    }

    // Validate that at least one field is provided for update
    if (Object.keys(data).length === 0) {
      throw new ValidationError('At least one field must be provided for update');
    }

    logger.info('Request validation successful', { id, updateFields: Object.keys(data) });

    // Update vulnerability
    const vulnerability = await vulnerabilityDefenderService.updateVulnerability(id!, data);

    logger.info('Vulnerability updated successfully', { id });

    return successResponse(vulnerability);
  } catch (error) {
    return handleError(error, context, request);
  } finally {
    logger.clearContext();
  }
}

app.http('updateVulnerability', {
  methods: ['PUT'],
  authLevel: 'anonymous',
  route: 'vulnerabilities/{id}',
  handler: updateVulnerability
});
