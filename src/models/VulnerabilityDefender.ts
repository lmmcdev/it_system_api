/**
 * VulnerabilityDefender entity model
 * Represents vulnerability data from Microsoft Defender for Endpoint stored in CosmosDB
 *
 * CosmosDB Storage Structure:
 * Documents are stored with nested structure where all vulnerability data
 * is nested under the "value" property:
 *
 * {
 *   id: "uuid-123",                    // CosmosDB document ID (partition key)
 *   value: {                            // Defender vulnerability data (nested)
 *     name: "CVE-2024-1234",
 *     severity: "High",
 *     cvssV3: 7.8,
 *     description: "...",
 *     publishedOn: "2024-10-15T10:00:00Z",
 *     updatedOn: "2024-10-20T10:00:00Z",
 *     // ... all other vulnerability fields
 *   },
 *   _rid: "...",                        // CosmosDB metadata
 *   _etag: "...",
 *   _ts: 1234567890
 * }
 *
 * API Response:
 * The API flattens this structure, returning properties at root level for easier consumption.
 * Repository layer handles the mapping from nested storage to flat response.
 */

/**
 * Microsoft Defender vulnerability data structure
 * Contains the actual vulnerability data from Microsoft Defender for Endpoint API
 */
export interface VulnerabilityDefenderData {
  // Vulnerability identification
  id: string;
  name: string;
  description?: string;

  // Severity and scoring
  severity: string; // 'Low', 'Medium', 'High', 'Critical'
  cvssV3?: number;
  exploitabilityLevel?: string;
  exploitTypes?: string[];
  exploitUris?: string[];
  exploitVerified?: boolean;

  // Vulnerability status
  publicExploit?: boolean;
  exploitInKit?: boolean;
  hasExploit?: boolean;

  // Dates
  publishedOn?: string; // ISO 8601 date
  updatedOn: string; // ISO 8601 date

  // Related CVEs and products
  weaknesses?: string[];
  references?: string[];
  relatedComponent?: string;

  // CVSS details
  cvssV3Vector?: string;
  cvssV3Base?: number;
  cvssV3Temporal?: number;
  cvssV3Environmental?: number;
}

/**
 * Main VulnerabilityDefender entity (API Response Structure)
 *
 * IMPORTANT: CosmosDB Storage Structure vs API Response
 * -------------------------------------------------------
 * CosmosDB documents have a NESTED structure where all Defender vulnerability data
 * is stored under a "value" property:
 * {
 *   "id": "uuid-123",
 *   "value": {
 *     "name": "CVE-2024-1234",
 *     "severity": "High",
 *     "cvssV3": 7.8,
 *     "updatedOn": "2024-10-20T10:00:00Z",
 *     ... (all other vulnerability fields)
 *   },
 *   "_rid": "...",
 *   "_etag": "...",
 *   "_ts": 1234567890
 * }
 *
 * This interface represents the FLATTENED structure returned by the API.
 * The repository layer handles mapping from the nested CosmosDB structure to this flat structure.
 */
export interface VulnerabilityDefender extends VulnerabilityDefenderData {
  // CosmosDB document ID (partition key)
  id: string;

  // CosmosDB metadata (optional, may not be present in all responses)
  _rid?: string;
  _self?: string;
  _etag?: string;
  _attachments?: string;
  _ts?: number;
}

/**
 * CosmosDB VulnerabilityDefender Document structure (Internal Storage)
 * This is the ACTUAL structure stored in CosmosDB with nested Defender data
 *
 * IMPORTANT: All Defender vulnerability data is nested under the 'value' property.
 * This structure separates CosmosDB metadata from the Defender API payload.
 */
export interface VulnerabilityDefenderDocument {
  // CosmosDB document ID (partition key)
  id: string;

  // Defender vulnerability data (NESTED under 'value')
  value?: VulnerabilityDefenderData;

  // CosmosDB system metadata
  _rid?: string;
  _self?: string;
  _etag?: string;
  _attachments?: string;
  _ts?: number;
}

/**
 * Vulnerability severity levels (Microsoft Defender standard values)
 */
export enum VulnerabilitySeverity {
  Low = 'Low',
  Medium = 'Medium',
  High = 'High',
  Critical = 'Critical'
}

/**
 * Create vulnerability request body for POST operations
 */
export interface CreateVulnerabilityRequest {
  name: string;
  description?: string;
  severity: string;
  cvssV3?: number;
  exploitabilityLevel?: string;
  exploitTypes?: string[];
  exploitUris?: string[];
  exploitVerified?: boolean;
  publicExploit?: boolean;
  exploitInKit?: boolean;
  hasExploit?: boolean;
  publishedOn?: string;
  updatedOn: string;
  weaknesses?: string[];
  references?: string[];
  relatedComponent?: string;
  cvssV3Vector?: string;
  cvssV3Base?: number;
  cvssV3Temporal?: number;
  cvssV3Environmental?: number;
}

/**
 * Update vulnerability request body for PUT operations
 */
export interface UpdateVulnerabilityRequest {
  name?: string;
  description?: string;
  severity?: string;
  cvssV3?: number;
  exploitabilityLevel?: string;
  exploitTypes?: string[];
  exploitUris?: string[];
  exploitVerified?: boolean;
  publicExploit?: boolean;
  exploitInKit?: boolean;
  hasExploit?: boolean;
  publishedOn?: string;
  updatedOn?: string;
  weaknesses?: string[];
  references?: string[];
  relatedComponent?: string;
  cvssV3Vector?: string;
  cvssV3Base?: number;
  cvssV3Temporal?: number;
  cvssV3Environmental?: number;
}

/**
 * Validation helper functions for runtime type checking
 */
export const VulnerabilityValidation = {
  isValidSeverity: (value: string): value is VulnerabilitySeverity => {
    return Object.values(VulnerabilitySeverity).includes(value as VulnerabilitySeverity);
  },

  isValidCvssScore: (score: number): boolean => {
    return score >= 0 && score <= 10;
  },

  isValidName: (name: string): boolean => {
    // CVE format: CVE-YYYY-NNNNN or custom vulnerability IDs
    return name.length > 0 && name.length <= 255;
  }
};
